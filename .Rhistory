install.packages("Biodem")
install.packages("expm")
knitr::opts_chunk$set(echo = TRUE)
t(M)
M = rbind(c(1, 0, 1), c(2, -1, 5), c(3, 3, 2))
t(M)
A = matrix(c(1, 1, 3, 4, 2, 5, 2, -2, -1, 3, -1, 5), nrow = 3, ncol = 4, byrow = TRUE)
B = matrix(c(1, 0, 2, 3, 3, 2, 1, -2, 3, 5, 3, 2, 1), nrow = 3, byrow= FALSE)
A + B
View(A)
View(B)
View(A)
B = matrix(c(1, 0, 2, 3, 3, 2, 1, -2, 3, 5), nrow = 3, byrow= FALSE)
A + B
A + B == B + A
5 * A
C%*%D
C = rbind(c(1, 2, 3), c(4, 5, 6), c(7, 8, 9))
D = cbind(c(1, 2, 3), c(4, 5, 6), c(7, 8, 9))
C%*%D
C%*%D == D%*%C #No es conmutativo
mtx.exp(A, 4)
# Calcula la potencia n-ésima (aproximada) con el paquete Biodem
library(Biodem)
mtx.exp(A, 4)
mtx.exp(A, 2)
mtx.exp(A, 2)
library(expm)
A%^%4 #con el paquete expm
# Calcula la potencia n-ésima (aproximada) con el paquete Biodem
library(Biodem)
mtx.exp(C, 2)
library(expm)
C%^%4 #con el paquete expm
qr(A)$rank
solve(M) #Si la matriz no es invertible lanza un error
round(solve(M)%*%M) #el output debe ser la identidad
1, 0, 2, 3, 3, 2, 1, -2, 3
A = matrix(c(1, 1, 3, 4, 2, 5, 2, -2, -1, 3, -1, 5), nrow = 3, ncol = 4, byrow = TRUE)
B = matrix(c(1, 0, 2, 3, 3, 2, 1, -2, 3, 1, 3, 2), nrow = 3, byrow= FALSE)
knitr::opts_chunk$set(echo = TRUE)
A = matrix(c(0, 1, -2), (2, 3, -1), c(1, -1, 5), byrow = TRUE)
A = matrix(c(0, 1, -2, 2, 3, -1, 1, -1, 5), byrow = TRUE)
A = matrix(c(0, 1, -2, 2, 3, -1, 1, -1, 5), nrow = 3,  byrow = TRUE)
A
C = matrix(c(2, 0, 1, -4))
B = matrix(c(1, -1, 2, 1, 2, -2, 2, -2, -1, 2, 1, 2), nrow = 3, byrow = TRUE)
install.packages("expm")
A = matrix(c(0, 1, 0, 1), nrow=2, byrow = TRUE)
B = matrix(c(-1, -1, 0, 0), nrow = 2, byrow = TRUE)
library(expm)
(A + B)%^%2 != A%^%2 + 2*A%*%B + B%^%2
(A + B)%^%2 == A%^%2 + 2*A%*%B + B%^%2
(A + B)%^%3 == A%^%3 + 3*(A%^%2)%*%B + B%^%3
A = [1 2 0; 0 1 -1; 0 0 2]
knitr::opts_chunk$set(echo = TRUE, engine.path = list(ocatave =  '/usr/bin/octave'))
A = [1 2 0; 0 1 -1; 0 0 2]
library("reticulate", lib.loc="~/anaconda3/lib/R/library")
install.packages("reticulate")
install.packages("reticulate")
knitr::opts_chunk$set(echo = TRUE)
use_python("python3")
install.packages("reticulate")
library("reticulate")
use_python("python3")
A = matrix([[-1, 1, -2], [1, 1, 0], [2, 1, 1]])
B = matrix([[-1, 2, 3, 4, 5], [1, 2, 1, 3, ,2], [0, 4, 4, 7, 7]])
A.shape
use_python("anaconda3/bin/python3")
A = matrix([[-1, 1, -2], [1, 1, 0], [2, 1, 1]])
B = matrix([[-1, 2, 3, 4, 5], [1, 2, 1, 3, ,2], [0, 4, 4, 7, 7]])
A.shape
B.shape
use_python("/anaconda3/bin/python3")
A = matrix([[-1, 1, -2], [1, 1, 0], [2, 1, 1]])
B = matrix([[-1, 2, 3, 4, 5], [1, 2, 1, 3, ,2], [0, 4, 4, 7, 7]])
A.shape
B.shape
A = matrix(c(-1, 1, 0, 0, 1 -1, 0, 0, 2), nrow = 3, byrow = TRUE)
A = matrix(c(-1, 1, 0, 0, 1 -1, 0, 0, 2), nrow = 3, byrow = TRUE)
A = matrix(c(1, 2, 0, 0, 1 -1, 0, 0, 2), nrow = 3, byrow = TRUE)
A = matrix(c(1, 2, 0, 0, 1 -1, 0, 0, 2), nrow = 3, byrow = TRUE)
A = matrix(c(1, 2, 0, 0, 1, -1, 0, 0, 2), nrow = 3, byrow = TRUE)
B = matrix(c(i, 0, 0, 0, 0, 1, 1, i, 0), nrow = 3, byrow = TRUE)
B = matrix(c(1i, 0, 0, 0, 0, 1, 1, 1i, 0), nrow = 3, byrow = TRUE)
inv(A)
solve(B)
solve(A)
A = rbind(c(10, 2, -1, 1, 0, 10), c(-1, -3, 0, 0, -5, 5), \
c(9, -1, *1, 1, -1, 15), c(17, 1, 0, 3, 5, -15), \
c(0, -10, 0, -5, 3, 0), c(-3, 1, 1, 1, -2, 2))
A = rbind(c(10, 2, -1, 1, 0, 10), c(-1, -3, 0, 0, -5, 5), \
c(9, -1, 1, 1, -1, 15), c(17, 1, 0, 3, 5, -15), \
c(0, -10, 0, -5, 3, 0), c(-3, 1, 1, 1, -2, 2))
A = rbind(c(10, 2, -1, 1, 0, 10), c(-1, -3, 0, 0, -5, 5), \
c(9, -1, 1, 1, -1, 15), c(17, 1, 0, 3, 5, -15), \
c(0, -10, 0, -5, 3, 0), c(-3, 1, 1, 1, -2, 2))
A = rbind(c(10, 2, -1, 1, 0, 10), c(-1, -3, 0, 0, -5, 5), c(9, -1, 1, 1, -1, 15), c(17, 1, 0, 3, 5, -15), c(0, -10, 0, -5, 3, 0), c(-3, 1, 1, 1, -2, 2))
b = c(0, 5, 0, 4, -21, 11)
AB = cbind(A, b)
qr(A)$rank==qr(AB)$rank
qr(A)$rank == 3 # Sistema
solve(A, b)
A%*%solution == b
solution = c(solve(A, b))
A%*%solution == b
solve(A, b)
