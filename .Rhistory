install.packages("Biodem")
install.packages("expm")
knitr::opts_chunk$set(echo = TRUE)
t(M)
M = rbind(c(1, 0, 1), c(2, -1, 5), c(3, 3, 2))
t(M)
A = matrix(c(1, 1, 3, 4, 2, 5, 2, -2, -1, 3, -1, 5), nrow = 3, ncol = 4, byrow = TRUE)
B = matrix(c(1, 0, 2, 3, 3, 2, 1, -2, 3, 5, 3, 2, 1), nrow = 3, byrow= FALSE)
A + B
View(A)
View(B)
View(A)
B = matrix(c(1, 0, 2, 3, 3, 2, 1, -2, 3, 5), nrow = 3, byrow= FALSE)
A + B
A + B == B + A
5 * A
C%*%D
C = rbind(c(1, 2, 3), c(4, 5, 6), c(7, 8, 9))
D = cbind(c(1, 2, 3), c(4, 5, 6), c(7, 8, 9))
C%*%D
C%*%D == D%*%C #No es conmutativo
mtx.exp(A, 4)
# Calcula la potencia n-ésima (aproximada) con el paquete Biodem
library(Biodem)
mtx.exp(A, 4)
mtx.exp(A, 2)
mtx.exp(A, 2)
library(expm)
A%^%4 #con el paquete expm
# Calcula la potencia n-ésima (aproximada) con el paquete Biodem
library(Biodem)
mtx.exp(C, 2)
library(expm)
C%^%4 #con el paquete expm
qr(A)$rank
solve(M) #Si la matriz no es invertible lanza un error
round(solve(M)%*%M) #el output debe ser la identidad
1, 0, 2, 3, 3, 2, 1, -2, 3
A = matrix(c(1, 1, 3, 4, 2, 5, 2, -2, -1, 3, -1, 5), nrow = 3, ncol = 4, byrow = TRUE)
B = matrix(c(1, 0, 2, 3, 3, 2, 1, -2, 3, 1, 3, 2), nrow = 3, byrow= FALSE)
knitr::opts_chunk$set(echo = TRUE)
A = matrix(c(0, 1, -2), (2, 3, -1), c(1, -1, 5), byrow = TRUE)
A = matrix(c(0, 1, -2, 2, 3, -1, 1, -1, 5), byrow = TRUE)
A = matrix(c(0, 1, -2, 2, 3, -1, 1, -1, 5), nrow = 3,  byrow = TRUE)
A
C = matrix(c(2, 0, 1, -4))
B = matrix(c(1, -1, 2, 1, 2, -2, 2, -2, -1, 2, 1, 2), nrow = 3, byrow = TRUE)
install.packages("expm")
A = matrix(c(0, 1, 0, 1), nrow=2, byrow = TRUE)
B = matrix(c(-1, -1, 0, 0), nrow = 2, byrow = TRUE)
library(expm)
(A + B)%^%2 != A%^%2 + 2*A%*%B + B%^%2
(A + B)%^%2 == A%^%2 + 2*A%*%B + B%^%2
(A + B)%^%3 == A%^%3 + 3*(A%^%2)%*%B + B%^%3
A = [1 2 0; 0 1 -1; 0 0 2]
knitr::opts_chunk$set(echo = TRUE, engine.path = list(ocatave =  '/usr/bin/octave'))
A = [1 2 0; 0 1 -1; 0 0 2]
library("reticulate", lib.loc="~/anaconda3/lib/R/library")
install.packages("reticulate")
install.packages("reticulate")
knitr::opts_chunk$set(echo = TRUE)
use_python("python3")
install.packages("reticulate")
library("reticulate")
use_python("python3")
A = matrix([[-1, 1, -2], [1, 1, 0], [2, 1, 1]])
B = matrix([[-1, 2, 3, 4, 5], [1, 2, 1, 3, ,2], [0, 4, 4, 7, 7]])
A.shape
use_python("anaconda3/bin/python3")
A = matrix([[-1, 1, -2], [1, 1, 0], [2, 1, 1]])
B = matrix([[-1, 2, 3, 4, 5], [1, 2, 1, 3, ,2], [0, 4, 4, 7, 7]])
A.shape
B.shape
use_python("/anaconda3/bin/python3")
A = matrix([[-1, 1, -2], [1, 1, 0], [2, 1, 1]])
B = matrix([[-1, 2, 3, 4, 5], [1, 2, 1, 3, ,2], [0, 4, 4, 7, 7]])
A.shape
B.shape
A = matrix(c(-1, 1, 0, 0, 1 -1, 0, 0, 2), nrow = 3, byrow = TRUE)
A = matrix(c(-1, 1, 0, 0, 1 -1, 0, 0, 2), nrow = 3, byrow = TRUE)
A = matrix(c(1, 2, 0, 0, 1 -1, 0, 0, 2), nrow = 3, byrow = TRUE)
A = matrix(c(1, 2, 0, 0, 1 -1, 0, 0, 2), nrow = 3, byrow = TRUE)
A = matrix(c(1, 2, 0, 0, 1, -1, 0, 0, 2), nrow = 3, byrow = TRUE)
B = matrix(c(i, 0, 0, 0, 0, 1, 1, i, 0), nrow = 3, byrow = TRUE)
B = matrix(c(1i, 0, 0, 0, 0, 1, 1, 1i, 0), nrow = 3, byrow = TRUE)
inv(A)
solve(B)
solve(A)
A = rbind(c(10, 2, -1, 1, 0, 10), c(-1, -3, 0, 0, -5, 5), \
c(9, -1, *1, 1, -1, 15), c(17, 1, 0, 3, 5, -15), \
c(0, -10, 0, -5, 3, 0), c(-3, 1, 1, 1, -2, 2))
A = rbind(c(10, 2, -1, 1, 0, 10), c(-1, -3, 0, 0, -5, 5), \
c(9, -1, 1, 1, -1, 15), c(17, 1, 0, 3, 5, -15), \
c(0, -10, 0, -5, 3, 0), c(-3, 1, 1, 1, -2, 2))
A = rbind(c(10, 2, -1, 1, 0, 10), c(-1, -3, 0, 0, -5, 5), \
c(9, -1, 1, 1, -1, 15), c(17, 1, 0, 3, 5, -15), \
c(0, -10, 0, -5, 3, 0), c(-3, 1, 1, 1, -2, 2))
A = rbind(c(10, 2, -1, 1, 0, 10), c(-1, -3, 0, 0, -5, 5), c(9, -1, 1, 1, -1, 15), c(17, 1, 0, 3, 5, -15), c(0, -10, 0, -5, 3, 0), c(-3, 1, 1, 1, -2, 2))
b = c(0, 5, 0, 4, -21, 11)
AB = cbind(A, b)
qr(A)$rank==qr(AB)$rank
qr(A)$rank == 3 # Sistema
solve(A, b)
A%*%solution == b
solution = c(solve(A, b))
A%*%solution == b
solve(A, b)
A = rbind(c(1,3,0,-1), c(2,1,-1,5), c(1,1,3,1))
luA = LU(A)
luA = LU(A)
luA = lu(A)
luA = lusys(A)
luA = lu.decomposition(A)
?LU
??LU
?lu
??lu
library(lu)
A = matrix(c(1,3,0,-1), c(2,1,-1,5), c(1,1,3,1))
luA = lu.decomposition(A)
luA = LU(A)
luA <- LU(A)
library(polynom)
p = polynomial(c(1, 1))^7
p
q = polynomial(c(1,1,1))
q
cociente = p/q
cociente
resto = p%%q
resto
cociente*q + resto
p
comprobación <- cociente*q + resto
p = comprobación
p <- polynomial(c(1, 1))^7
p == comprobación
z = ((1+1i)^7/(1-1i))
z
Mod(z)
Arg(com)
com <- ((1+1i)^7/(1-1i))
com
Mod(com) # Módulo
Arg(com)
knitr::opts_chunk$set(echo = TRUE)
x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 0)
x
# Longitud de un vector
lenght(10)
# Longitud de un vector
length(x)
# Operaciones aritméticas con vectores
x = c(0,3,-1,3,5)
x+y
x-y
y = c(1,2,3,-1,0)
x+y
x-y
2*x
-2*x
productoEscalar = function(x,y) {
if (lenght(x) == length(y)) {
sum(x*y)
} else {
print("ERROR: No se puede calcular el producto escalar de estos dos vectores porque no son de la misma dimensión")
}
}
productoEscalar(x,y) #Llamamos la función definida
productoEscalar(x,y) #Llamamos la función definida
productoEscalar = function(x,y) {
if (length(x) == length(y)) {
sum(x*y)
} else {
print("ERROR: No se puede calcular el producto escalar de estos dos vectores porque no son de la misma dimensión")
}
}
productoEscalar(x,y) #Llamamos la función definida
x = c(1,2,0,3,-1,1)
Norm(x) # Calculamos la norma de x
norm(x) # Calculamos la norma de x
?norm
x = c(1,2,0,3,-1,1)
norm(x) # Calculamos la norma de x
x = matrix(1,2,0,3,-1,1)
x = matrix(1,2,0,3,-1,1)
?matrix
x = matrix(1,2,0,3,-1,1, nrow = 1, ncol = 1)
x = matrix(c(1,2,0,3,-1,1), nrow = 1, ncol = 1)
norm(x) # Calculamos la norma de x
distancia <- function(x,y) {
if (length(x) == length(y)) {
nomr(x-y)
} else {
print("ERROR: No se puede caluclar la distancia entre estos dos puntos porque no son de la misma dimensión")
}
}
x <- matrix(c(0,3,-1,3,5))
y <- matirx(c(1,2,3,-1,0))
y <- matrix(c(1,2,3,-1,0))
distancia(x,y)
distancia <- function(x,y) {
if (length(x) == length(y)) {
norm(x-y)
} else {
print("ERROR: No se puede caluclar la distancia entre estos dos puntos porque no son de la misma dimensión")
}
}
x <- matrix(c(0,3,-1,3,5))
y <- matrix(c(1,2,3,-1,0))
distancia(x,y)
x <- matrix(c(0,3,-1,3,5), nrow = 1, ncol =1)
y <- matrix(c(1,2,3,-1,0), nrow = 1, ncol =1)
distancia(x,y)
x
x <- matrix(c(1,2,0,3,-1,1), nrow = 1)
norm(x) # Calculamos la norma de x
x <- matrix(c(0,3,-1,3,5), nrow = 1)
y <- matrix(c(1,2,3,-1,0), nrow = 1)
distancia(x,y)
x
x <- c(1,2,0,3,-1,1)
x
norm(x) # Calculamos la norma de x
x <- matrix(c(0,3,-1,3,5), nrow = 1)
y <- matrix(c(1,2,3,-1,0), nrow = 1)
distancia(x,y)
??Norm
?Norm
install.packages("matlib")
install.packages("rgl")
install.packages("matlib", dependencies = TRUE)
install.packages("matlib", dependencies = TRUE)
install.packages("matlab")
?matlab
??matlab
?acos
# Para hacer la proyección ortogonal definimos otra función
proyeccionOrt = function(u,v) {
if (length(u) == length(v)) {
productoEscalar(u,v)/norm(u)^2*u
} else {
print("ERROR: No se puede calcular la proyección ortogonal de v sobre u porque  no son de la misma dimensión")
}
}
v = c(1,2)
u= c(3,1)
proyeccionOrt(u,v)
u= matrix(c(3,1))
v = matrix(c(1,2))
proyeccionOrt(u,v)
u= rbind(c(3,1))
v = matrix(c(1,2))
proyeccionOrt(u,v)
v = rbind(c(1,2))
proyeccionOrt(u,v)
u
x <- rbind(c(0,3,-1,3,5))
x <- rbind(c(0,3,-1,3,5))
y <- rbind(c(1,2,3,-1,0))
distancia(x,y)
x <- rbind(c(1,2,0,3,-1,1), nrow = 1)
norm(x) # Calculamos la norma de x
productoEscalar(x,y) #Llamamos la función definida
# Operaciones aritméticas con vectores
x = rbind(c(0,3,-1,3,5))
y = rbind(c(1,2,3,-1,0))
x+y
x-y
2*x
productoEscalar(x,y) #Llamamos la función definida
u= rbind(c(3,1))
v = rbind(c(1,2))
proyeccionOrt(u,v)
productoVectorial = function(x,y) {
if (length(x) == length(y) & length(x) == 3) {
c(x[2]*y[3] - x[3]*y[2], (-x[1]*y[3]-x[3]*y[1]), x[1]*[2]-x[2]*y[1])
productoVectorial = function(x,y) {
x = c(1,2,3)
y = c(0,-1,1)
productoVectorial(x,y)
x = c(1,2,3)
y = c(0,-1,1)
productoVectorial(x,y)
productoVectorial = function(x,y) {
return(c(x[2]*y[3] - x[3]*y[2], (-x[1]*y[3]-x[3]*y[1], x[1]*[2]-x[2]*y[1]))
x = c(1,2,3)
y = c(0,-1,1)
productoVectorial(x,y)
productoVectorial = function(x,y) {
x = c(1,2,3)
y = c(0,-1,1)
productoVectorial(x,y)
productoMixto = function(x,y,z){
if (length(x) == length(y) & length(x) == length(z) & length(x) == 3) {
det(rbind(x, y ,z))
} else {
print("No se cumplen las condiciones para calcular el producto mixto de estos vectores")
}
}
productoVectorial <- function(x,y) {
productoVectorial <- function(x,y) {
productoVectorial <- function(x,y) {
if (length(x) == length(y) & length(x) == 3) {
return(c(x[2]*y[3] - x[3]*y[2], (-x[1]*y[3]-x[3]*y[1],   x[1]*[2]-x[2]*y[1]))
productoVectorial <- function(x,y) {
productoVectorial <- function(x,y) {
productoMixto(x, y, )
productoMixto(x, y, z)
productoMixto = function(x,y,z){
if (length(x) == length(y) & length(x) == length(z) & length(x) == 3) {
det(rbind(x, y ,z))
} else {
print("No se cumplen las condiciones para calcular el producto mixto de estos vectores")
}
}
z <- c(3,5,2)
productoMixto(x, y, z)
productoMixto = function(x,y,z){
if (length(x) == length(y) & length(x) == length(z) & length(x) == 3) {
return(det(rbind(x, y ,z)))
} else {
print("No se cumplen las condiciones para calcular el producto mixto de estos vectores")
}
}
z <- c(3,5,2)
productoMixto(x, y, z)
det(x)
det(x)
print("hijo")
productoEscalar(u, v)/norm(u)^2*u
# Para hacer la proyección ortogonal definimos otra función
proyeccionOrt = function(u,v) {
if (length(u) == length(v)) {
productoEscalar(u, v)/norm(u)^2*u
} else {
print("ERROR: No se puede calcular la proyección ortogonal de v sobre u porque  no son de la misma dimensión")
}
}
# Para hacer la proyección ortogonal definimos otra función
proyeccionOrt = function(u,v) {
if (length(u) == length(v)) {
productoEscalar(u, v)/norm(u)^2*u
} else {
print("ERROR: No se puede calcular la proyección ortogonal de v sobre u porque  no son de la misma dimensión")
}
}
return(c(x[2]*y[3] - x[3]*y[2], -x[1]*y[3]-x[3]*y[1], x[1]*[2]-x[2]*y[1]))
return(c(x[2]*y[3] - x[3]*y[2], -x[1]*y[3]-x[3]*y[1], x[1]-x[2]*y[1]))
